# To clone a repository
git clone https://github.com/udacity/asteroids.git

#######

# to check logs
git log

#######

# to check difference between 2 versions
git diff
eg : 
E:\codes\Git\version-control\asteroids [master]> git diff ac83b72030d79cf35944125793efcbdf57d93635 75928a98e18479b22b18888a33d36379f17b43c1

#######

# Exiting git log
# To stop viewing git log output, press q (which stands for quit).


# Getting Colored Output
# To get colored diff output, run 
git config --global color.ui auto

#######

# git checkout : to get to a previous version

E:\codes\Git\version-control\asteroids [master]> git checkout b0678b161fcf74467ed3a63110557e3d6229cfa6
Note: checking out 'b0678b161fcf74467ed3a63110557e3d6229cfa6'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.


# to go back to master
git checkout master

#######

Configuring your name and email

When you used git log earlier, you saw that Git listed the author of each commit. In order to do this, Git needs to know your name and email address. In fact, Git will not allow you to commit before you’ve given it this information. To do so:

Run 

git config --global user.name "Anoop T P"
git config --global user.email "anooptp6490@gmail.com"

Fill in your own name and email address where indicated.

#######

Additional Git configurations

There are a couple of additional Git configurations that will be helpful for you in future lessons. We’re including them here so that all our configuration suggestions will be in one place. It will become clear in later lessons why these are useful. For now, add the following configurations:

Run 
git config --global push.default upstream
git config --global merge.conflictstyle diff3

#######

To create a git repository

git init

To check status of a git repository

git status

#######

Add files to staging area:

git add <file_name>

Deleting file from staging area:

git reset <file_name>

Comparing working directory and staging area:

git diff

Comparing staging area and git repository:

git diff --staged

#######
