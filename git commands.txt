# To clone a repository
git clone https://github.com/udacity/asteroids.git

#######

# to check logs
git log

#######

# to check difference between 2 versions
git diff
eg : 
...\version-control\asteroids [master]> git diff ac83b72030d79cf35944125793efcbdf57d93635 75928a98e18479b22b18888a33d36379f17b43c1

#######

# Exiting git log
# To stop viewing git log output, press q (which stands for quit).


# Getting Colored Output
# To get colored diff output, run 
git config --global color.ui auto

#######

# git checkout : to get to a previous version

...\version-control\asteroids [master]> git checkout b0678b161fcf74467ed3a63110557e3d6229cfa6
Note: checking out 'b0678b161fcf74467ed3a63110557e3d6229cfa6'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.


# to go back to master
git checkout master

#######

Configuring your name and email

When you used git log earlier, you saw that Git listed the author of each commit. In order to do this, Git needs to know your name and email address. In fact, Git will not allow you to commit before you’ve given it this information. To do so:

Run 

git config --global user.name "Anoop T P"
git config --global user.email "anooptp6490@gmail.com"

Fill in your own name and email address where indicated.

#######

Additional Git configurations

There are a couple of additional Git configurations that will be helpful for you in future lessons. We’re including them here so that all our configuration suggestions will be in one place. It will become clear in later lessons why these are useful. For now, add the following configurations:

Run 
git config --global push.default upstream
git config --global merge.conflictstyle diff3

#######

To create a git repository

git init

To check status of a git repository

git status

#######

Add files to staging area:

git add <file_name>

Deleting file from staging area:

git reset <file_name>

Comparing working directory and staging area:

git diff

Comparing staging area and git repository:

git diff --staged

#######

# Leave 'detached HEAD' state

Right now, your HEAD should still be 'detached' from Lesson 1 when you checked out an old commit. 
To fix that, run the command 
git checkout master


#######

# To see different branches

git branch

# To create a new branch

git branch <new_branch_name>
eg: git branch easy-mode

# To switch branch
git checkout <new_branch_name>
eg: git checkout easy-mode

#######

# git checkout coins

...\version-control\asteroids [easy-mode]> git checkout coins
Branch coins set up to track remote branch coins from origin.
Switched to a new branch 'coins'

Viewing the commit history

The full command Caroline types to see the visual representation of the commit history is 

git log --graph --oneline master coins

#######

# to create a new branch to retain commits you create 

git checkout -b new_branch_name

is equivalent to :
git branch new_branch_name
git checkout new_branch_name

#######

Merging branches:

...\version-control\asteroids [master]> git branch
  coins
  easy-mode
* master

...\version-control\asteroids [master]> git merge master coins
Auto-merging game.js
Merge made by the 'recursive' strategy.
 game.js | 161 +++++++++++++++++++++++++++++++++++++++++++++-------------------
 1 file changed, 115 insertions(+), 46 deletions(-)

...\version-control\asteroids [master]>

#######

Checking out the coins branch

If you haven't already checked out the coins branch, you'll need to do so now with the command git checkout coins before you'll be able to refer to it. Once you've done that, decide whether you should keep it checked out or check out a different branch before completing the merge.

A note about git merge

git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

#######

# Comparing a commit to its parent

The command Caroline mentions to compare a commit to its parent is 

git show <commit_id>

#######

# Deleing a branch

git branch -d <branch_name>

...\version-control\asteroids [master]> git branch -d coins
Deleted branch coins (was 354dfdd).

#######

# To view remotes

git remote

# To create remote 

git remote <remote_name>

#######

git remote add origin1 https://github.com/anooptp/reflections.git

...\version-control\reflections [master +0 ~3 -0]> git remote add origin1 https://github.com/anooptp/reflections.git
...\version-control\reflections [master +0 ~3 -0]> git remote
origin
origin1
...\version-control\reflections [master +0 ~3 -0]> git remote -v
origin
origin1 https://github.com/anooptp/reflections.git (fetch)
origin1 https://github.com/anooptp/reflections.git (push)
...\version-control\reflections [master +0 ~3 -0]>

#######

# Push the updates to github

git push origin1 <branch_name>

...\version-control\reflections [master]> git push origin1 master
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 624 bytes | 0 bytes/s, done.
Total 3 (delta 2), reused 0 (delta 0)
To https://github.com/anooptp/reflections.git
   7e1d2ad..b7992b0  master -> master

#######

# Pull the updated file from github

git pull origin1 <branch_name>

...\version-control\reflections [master +0 ~1 -0]> git pull origin1 master
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/anooptp/reflections
 * branch            master     -> FETCH_HEAD
   a30fc7e..7e1d2ad  master     -> origin1/master
Updating a30fc7e..7e1d2ad
Fast-forward
 lesson_3_reflection_prompts.txt | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)
 create mode 100644 lesson_3_reflection_prompts.txt

#######

